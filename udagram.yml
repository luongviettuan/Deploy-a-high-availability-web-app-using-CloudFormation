Description: Tuanlv12 / Deploy a high-availability web app using CloudFormation - Webapp

Parameters:
  EnvironmentName:
    Description: My Develop Environment
    Type: String
  MyIpAddress:
    Description: My IP Address
    Type: String

Resources:
  #====== SecurityGroup Load Balancer (allow all traffic inbound port 80) =========#
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Load-Balancer-Security-Group

  #======= Security Group Bastion Host, using to our jumpboxes SSH to WebApp ========#
  BastionSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for bastion servers, Allow SSH to our jumpboxes
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref MyIpAddress
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Bastions-Security-Group

  #===== SecurityGroup Web App (Load Balancer using port 80, SSH using port 22 through Bastion Server) ======#
  WebAppSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Only allow http to our load balancer and SSH from local
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref LBSecGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSecGroup
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-WebServer-Security-Group

  
  #=============== Launch configuration template ===============#
  WebAppLaunchConfigTemplate:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
            #!/bin/bash
            apt-get update -y
            sudo apt-get install nginx -y
            service nginx start

            # Define the directory where the index.html will be placed
            WEB_DIR="/var/www/html"

            # Create a basic index.html file
            cat <<EOF >index.html
            <!DOCTYPE html>
            <html>
            <head>
                <title>It works! Udagram, Udacity</title>
            </head>
            <body>
                <h1>It works! Udagram, Udacity</h1>
                <p>This website is hosted on Nginx.</p>
            </body>
            </html>
            EOF

            # Copy index.html to the Nginx web directory
            sudo rm -r $WEB_DIR/index.*
            sudo cp index.html $WEB_DIR
            sudo systemctl reload nginx

      ImageId: ami-0e001c9271cf7f3b9
      SecurityGroups:
        - Ref: WebAppSecGroup
      InstanceType: t2.micro
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: "10"
      IamInstanceProfile: !Ref InstanceProfile

  #=============== Autoscaling Group =============#
  AutoScalingWebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfigTemplate
      MinSize: "1"
      MaxSize: "4"
      TargetGroupARNs:
        - Ref: TargetGroup


  #=============== Create Load Balancer, Listener, Listener Rule, TargetGroup =================#
  # Load Balancer
  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUBL-NET-1"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUBL-NET-2"
      SecurityGroups:
        - Ref: LBSecGroup

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: TargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: "80"
      Protocol: HTTP

  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref "TargetGroup"
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref "Listener"
      Priority: 1

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 3
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 6
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCID"


  #========================== Create 2 Bastion corresponding to 2 Public Subnet ==========================#
  BastionServer1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0e001c9271cf7f3b9
      InstanceType: t2.micro
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - Ref: "BastionSecGroup"
          SubnetId:
            Fn::ImportValue: !Sub "${EnvironmentName}-PUBL-NET-1"

  BastionServer2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0e001c9271cf7f3b9
      InstanceType: t2.micro
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - Ref: "BastionSecGroup"
          SubnetId:
            Fn::ImportValue: !Sub "${EnvironmentName}-PUBL-NET-2"



  # =========== Connect Webapp to S3 ===============#
  # Create S3 Bucket
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${EnvironmentName}-s3"
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true

  #IAMRole for S3
  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref EnvironmentName
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: 'Allow'
          Principal:
            Service:
            - 'ec2.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Policies:
        - PolicyName: s3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - 's3:PutObject'
              - 's3:GetObject'
              Resource:
                - !GetAtt S3Bucket.Arn

  # Set Role for Profile
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles:
      - !Ref IAMRole
